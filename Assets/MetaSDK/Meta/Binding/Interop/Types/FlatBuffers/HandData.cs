// Copyright © 2018, Meta Company.  All rights reserved.
// 
// Redistribution and use of this software (the "Software") in binary form, without modification, is 
// permitted provided that the following conditions are met:
// 
// 1.      Redistributions of the unmodified Software in binary form must reproduce the above 
//         copyright notice, this list of conditions and the following disclaimer in the 
//         documentation and/or other materials provided with the distribution.
// 2.      The name of Meta Company (“Meta”) may not be used to endorse or promote products derived 
//         from this Software without specific prior written permission from Meta.
// 3.      LIMITATION TO META PLATFORM: Use of the Software is limited to use on or in connection 
//         with Meta-branded devices or Meta-branded software development kits.  For example, a bona 
//         fide recipient of the Software may incorporate an unmodified binary version of the 
//         Software into an application limited to use on or in connection with a Meta-branded 
//         device, while he or she may not incorporate an unmodified binary version of the Software 
//         into an application designed or offered for use on a non-Meta-branded device.
// 
// For the sake of clarity, the Software may not be redistributed under any circumstances in source 
// code form, or in the form of modified binary code – and nothing in this License shall be construed 
// to permit such redistribution.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A 
// PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL META COMPANY BE LIABLE FOR ANY DIRECT, 
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS 
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// automatically generated by the FlatBuffers compiler, do not modify

namespace types.fbs
{

using System;
using FlatBuffers;

public struct HandData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static HandData GetRootAsHandData(ByteBuffer _bb) { return GetRootAsHandData(_bb, new HandData()); }
  public static HandData GetRootAsHandData(ByteBuffer _bb, HandData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public HandData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool IsTracked { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool MutateIsTracked(bool is_tracked) { int o = __p.__offset(4); if (o != 0) { __p.bb.Put(o + __p.bb_pos, (byte)(is_tracked ? 1 : 0)); return true; } else { return false; } }
  public int HandId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool MutateHandId(int hand_id) { int o = __p.__offset(6); if (o != 0) { __p.bb.PutInt(o + __p.bb_pos, hand_id); return true; } else { return false; } }
  public HandType HandType { get { int o = __p.__offset(8); return o != 0 ? (HandType)__p.bb.GetInt(o + __p.bb_pos) : HandType.RIGHT; } }
  public bool MutateHandType(HandType hand_type) { int o = __p.__offset(8); if (o != 0) { __p.bb.PutInt(o + __p.bb_pos, (int)hand_type); return true; } else { return false; } }
  public types.fbs.Vector3f? Top { get { int o = __p.__offset(10); return o != 0 ? (types.fbs.Vector3f?)(new types.fbs.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public types.fbs.Vector3f? Palm { get { int o = __p.__offset(12); return o != 0 ? (types.fbs.Vector3f?)(new types.fbs.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public types.fbs.Vector3f? HandAnchor { get { int o = __p.__offset(14); return o != 0 ? (types.fbs.Vector3f?)(new types.fbs.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public types.fbs.Vector3f? GrabAnchor { get { int o = __p.__offset(16); return o != 0 ? (types.fbs.Vector3f?)(new types.fbs.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public bool IsGrabbing { get { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool MutateIsGrabbing(bool is_grabbing) { int o = __p.__offset(18); if (o != 0) { __p.bb.Put(o + __p.bb_pos, (byte)(is_grabbing ? 1 : 0)); return true; } else { return false; } }
  public int FingerCount { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool MutateFingerCount(int finger_count) { int o = __p.__offset(20); if (o != 0) { __p.bb.PutInt(o + __p.bb_pos, finger_count); return true; } else { return false; } }
  public IndexedVec3? Fingertips(int j) { int o = __p.__offset(22); return o != 0 ? (IndexedVec3?)(new IndexedVec3()).__assign(__p.__vector(o) + j * 16, __p.bb) : null; }
  public int FingertipsLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static void StartHandData(FlatBufferBuilder builder) { builder.StartObject(10); }
  public static void AddIsTracked(FlatBufferBuilder builder, bool isTracked) { builder.AddBool(0, isTracked, false); }
  public static void AddHandId(FlatBufferBuilder builder, int handId) { builder.AddInt(1, handId, 0); }
  public static void AddHandType(FlatBufferBuilder builder, HandType handType) { builder.AddInt(2, (int)handType, 0); }
  public static void AddTop(FlatBufferBuilder builder, Offset<types.fbs.Vector3f> topOffset) { builder.AddStruct(3, topOffset.Value, 0); }
  public static void AddPalm(FlatBufferBuilder builder, Offset<types.fbs.Vector3f> palmOffset) { builder.AddStruct(4, palmOffset.Value, 0); }
  public static void AddHandAnchor(FlatBufferBuilder builder, Offset<types.fbs.Vector3f> handAnchorOffset) { builder.AddStruct(5, handAnchorOffset.Value, 0); }
  public static void AddGrabAnchor(FlatBufferBuilder builder, Offset<types.fbs.Vector3f> grabAnchorOffset) { builder.AddStruct(6, grabAnchorOffset.Value, 0); }
  public static void AddIsGrabbing(FlatBufferBuilder builder, bool isGrabbing) { builder.AddBool(7, isGrabbing, false); }
  public static void AddFingerCount(FlatBufferBuilder builder, int fingerCount) { builder.AddInt(8, fingerCount, 0); }
  public static void AddFingertips(FlatBufferBuilder builder, VectorOffset fingertipsOffset) { builder.AddOffset(9, fingertipsOffset.Value, 0); }
  public static void StartFingertipsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(16, numElems, 4); }
  public static Offset<HandData> EndHandData(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<HandData>(o);
  }
  public static void FinishHandDataBuffer(FlatBufferBuilder builder, Offset<HandData> offset) { builder.Finish(offset.Value); }
};


}
